Git Intro 2 Activity
==================
A.  Form teams
-------------
Form a 2-person team. Try to find someone who uses the same platform as
you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are
the odd-person-out, join a team of 2 with permission of your TA.
Make a repo on GitHub.
Complete the exercises below, and fill in your answers in the spaces
provided below each question.
Once you have completed all the exercises and filled in this file with
your answers,
add this file to your working directory (which you will create in section
G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget
to push it at the end!
1.  List your team members below.
```
Jolyne Stoup
Ryan Boedeker
```
D. Getting help
---------------
Run the following commands.
git help
git help -ag
git help init
1.  What does `git help` do?
```
It shows the general usage of git commands, and shows commonly used commands and what they do.
```
2.  What does `-ag` cause `git help` to do?
```
It again shows the general usage of git commands, but it also shows every command you are able to run, as well as common Git guides.
```
G. Basic commands
-----------------
Open the terminal. Navigate to your team’s repository directory.
Create a directory inside of your team repository which will act as your
submission directory for this lab.
The directory should be named according to the last names of your team
members following the format below.
<member1LastName>_<member2LastName>_Lab6
Use a plain text editor to create `names.txt` inside the directory you
just created.
Put the names of your team in the file. Save and exit.
Run `git status` before and after each of these commands.
git add names.txt
git commit â

m â

Add our names.â

git log
1.  What kind of information does `git status` report?
```
Displayed if local branch was ahead/behind of repo, and showed what was added and needed to be committed.
```
2.  What does `git add names.txt` do?
```
Stages names.txt to be committed to the repo.
```
3.  What does `git commit -m "Add our names."` do?
```
It commits everything that was added/staged previously to your local branch with the message “Add our names”.
```
Use a plain text editor to create the following files:
-  `birthdays.txt` - Put your birthdays in this file. (you are not
obligated to use real information here)
-  `movies.txt` - Put the last movie each of you watched in alphabetical
order.
Run `git status` before and after each of these commands.
git add .
git commit         Note:  Commit will open the vim editor; write a
multi-line commit
  message, save
and quit (press esc and then type :wq).
git log
4.  What does `git add .` do? What do you think `.` means?
```
Git add . adds all changes/insertions/deletions in the local branch. The . means all.
```
5.  What does `git commit` (without -m) do?
```
Opens up in a new window to type the commit message
```
6.  If you want to write a more detailed commit message (which is
good practice) what command would you use?
```
Git commit
```
7.  What does `git log do`?
```
Shows history of your commits
```
H. Stage/Cache/Index
--------------------
Do the following:
-  Modify `names.txt` so that names are listed in *Last, First* format,
one per line.
-  Modify `movies.txt` so they are in reverse alphabetical order
by title.
-  Create a new file `foods.txt` that contains your favorite foods (one
for each team member).
Run the following commands:
git add names.txt
git status
1.  Below write each file name under the state that its changes are
currently in. Compose a definition for each state.
**Staged**
```
names.txt
```
**Unstaged**
```
movies.txt
```
**Untracked**
```
foods.txt
```
1.  If you run `git commit` what changes will be committed (***DONâ

T DO
IT***)?
```
It would commit only the names.txt changes
```
2.  What command do you run to stage changes?
```
Git add <file>
```
3.  What command do you run to unstage changes?
```
Git reset HEAD <file>
```
Run the following commands:
git diff
git diff --cached
1.  What does `git diff` display?
```
It displays the line-by-line differences with unstaged files that were modified.
```
2.  What does `git diff --cached` display?
```
It displays the line-by-line differences with staged files that were modified.
```
3.  Formulate a sequence of commands to unstage changes to `names.txt`,
and stage the changes to `movies.txt`. Write them here. Execute your
commands and
confirm they worked.
```
Git reset HEAD names.txt
Git add movies.txt
```
4.  Edit `movies.txt`, change any one of the movies, and save it. Then
run `git status`. What do you observe? Explain what you think is
going on.
```
Movies.txt is displayed in both the staged and unstaged portions. Git has the older version of movies.txt staged before the changes made to it, and has the movies.txt after the changes were made in a place ready to be staged.
```
5.  Delete `names.txt`. Then run `git status`. What do you observe?
Explain what you think is going on.
```
It shows that names.txt has been deleted. It was tracking names.txt, and knows that you have deleted it.
```
6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
and explain.
```
Movies.txt shows as deleted, and last-movies shows as untracked. Git doesn’t know that you’ve changed the name of the file, it only sees that movies.txt is gone and a new file, last-movies, now exists.
```
7.  Formulate a sequence of commands to stage all changes including the
untracked file and commit (with any reasonable message you like).
Execute them.
```
Git add .
Git commit -m “Added all files”
```
8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
same thing. What does it hold?
```
It holds all the files that are ready to be committed and are already tracked.
```
9.  Why have a `stage`? Why not just commit all changes since the last
commit?
```
Because you may not want to commit everything changed since last commit.
```
I. Undo
-------
Run the following commands:
git log
git status
git reset --soft "HEAD^"
git log
git status
1.  What does `git reset --soft ``"HEAD^" `do?
```
It undos your last commit and brings those files committed back to staged.
```
Run the following commands:
git commit â

m "Redo."
git log
git status
git reset --hard "HEAD^"
git log
git status
1.  What does `git reset --hard ``"HEAD^"`` `do?
```
It undos your last commit and takes those files committed and gets rid of all changes/insertions/deletions.
```
2.  What is the difference between `--hard` and `--soft`?
```
--hard gets rid of all the changes, soft does not.
```
3.  What do you think `HEAD` means?
```
HEAD is the most recent commit.
```
4.  What do you think `HEAD^` means?
```
HEAD is the second most recent commit.
```
5.  On Canvas, put two things: 1) a link to your repo (as a comment on the
assignment), and 2) submit this document.
6.  Push this document, completed, to your repo.
J. Helpful resources
--------------------
-  <https://git-scm.com/doc>
-  <https://www.atlassian.com/git/tutorials/>
-  github-git-cheat-sheet.pdf on class website
K. Copyright and Licensing
--------------------------
Adapted from:
Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED
This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .